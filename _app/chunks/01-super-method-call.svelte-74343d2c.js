import{S as Yn,i as $n,s as st,e as l,t as n,k as u,c,a as p,h as t,d as e,m as d,b as o,g as r,G as s,K as Ke}from"./vendor-21bfd96e.js";function at(Vn){let D,na,xs,V,An=`<code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Message</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> sender<span class="token punctuation">,</span> receiver<span class="token punctuation">,</span> content<span class="token punctuation">;</span>

	<span class="token comment">// ... constructor &amp; getters ...</span>

	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// simple message formatting</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">FormalMessage</span> <span class="token keyword">extends</span> <span class="token class-name">Message</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span> <span class="token class-name">FormalMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> sender<span class="token punctuation">,</span> <span class="token class-name">String</span> receiver<span class="token punctuation">,</span> <span class="token class-name">String</span> content<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">super</span><span class="token punctuation">(</span>sender<span class="token punctuation">,</span> receiver<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token comment">// formal message formatting</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Dear "</span> <span class="token operator">+</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getReceiver</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Sincerely, "</span> <span class="token operator">+</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getSender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Fs,v,ta,U,oa,la,z,ca,pa,Q,ia,ra,Ts,ua,da,Ls,A,Hn=`<code class="language-java"><span class="token keyword">class</span> <span class="token keyword">extends</span> <span class="token class-name">FormalIncognitoMessage</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span> <span class="token class-name">FormalIncognitoMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> sender<span class="token punctuation">,</span> <span class="token class-name">String</span> receiver<span class="token punctuation">,</span> <span class="token class-name">String</span> content<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">super</span><span class="token punctuation">(</span>sender<span class="token punctuation">,</span> receiver<span class="token punctuation">,</span> content<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getSender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> <span class="token string">"Anonymous"</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Ps,H,Jn=`<code class="language-java">		<span class="token class-name">Message</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormalIncognitoMessage</span><span class="token punctuation">(</span><span class="token string">"SillyFreak"</span><span class="token punctuation">,</span> <span class="token string">"World"</span><span class="token punctuation">,</span> <span class="token string">"Hello."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		m<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token comment">// Dear World,</span>
		<span class="token comment">// Hello.</span>
		<span class="token comment">// Sincerely, SillyFreak</span></code>`,Ws,S,ha,X,ka,fa,Is,w,ma,Y,va,wa,$,Ea,ya,ss,_a,ga,as,ba,Ma,Vs,h,Ca,es,Oa,Da,ns,Sa,Ta,ts,ja,xa,os,Fa,La,ls,Pa,Wa,cs,Ia,Va,ps,Aa,Ha,is,Ja,Ra,As,J,Ba,Hs,T,Na,rs,Za,qa,Js,R,Rn=`<code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Rs,j,Ga,us,Ka,Ua,Bs,B,Bn=`<code class="language-shell">javac *.java
javap -c B.class</code>`,Ns,N,za,Zs,Z,Nn=`<code class="language-bytecode">  public void bar();
    Code:
       0: aload_0
       1: invokevirtual #7                  // Method foo:()V
       4: aload_0
       5: invokespecial #12                 // Method A.foo:()V
       8: return</code>`,qs,x,Qa,F,Xa,Ya,Gs,E,b,$a,ds,se,ae,hs,ee,ne,te,m,oe,ks,le,ce,L,pe,ie,fs,re,ue,ms,de,he,vs,ke,fe,me,P,ve,ws,we,Ee,ye,_,_e,Es,ge,be,ys,Me,Ce,_s,Oe,De,Se,W,Te,gs,je,xe,Ks,q,Fe,Us,G,Zn=`<code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">""</span> <span class="token operator">+</span> i<span class="token punctuation">;</span></code>`,zs,K,Le,Qs,k,Pe,bs,We,Ie,Ms,Ve,Ae,js,He,Je,Cs,Re,Be,Os,Ne,Ze,Ds,qe,Ge;return{c(){D=l("p"),na=n(`When creating a subclass, a common situation is to overwrite a method, but using the original class\u2019 logic in doing so.
Let\u2019s say we have a class for sending messages, and we want to make a variant that is written in a more formal style.
In doing so, we want to preserve the \u201Csimple message formatting\u201D logic that the superclass implements.
A simple approach could look like this:`),xs=u(),V=l("pre"),Fs=u(),v=l("p"),ta=n("This might look alright: when overriding "),U=l("code"),oa=n("send"),la=n(", we need to use "),z=l("code"),ca=n("super.send()"),pa=n(` to avoid an accidental recursion.
For consistency, why not also use `),Q=l("code"),ia=n("super.getReceiver()"),ra=n(`?
Those methods `),Ts=l("em"),ua=n("are"),da=n(` all defined in the superclass, after all.
Well, consider this extension:`),Ls=u(),A=l("pre"),Ps=u(),H=l("pre"),Ws=u(),S=l("p"),ha=n("What happened here? Well, that "),X=l("code"),ka=n("super"),fa=n(" is not only special in an overridden method, it generally fixes the implementation of the method to use to that of the superclass."),Is=u(),w=l("p"),ma=n(`A regular non-static method call in Java uses \u201Cdynamic dispatch\u201D: at runtime, the class of the object the method is called on is used to determine what variant is called.
For example, `),Y=l("code"),va=n("formalMessage.getSender()"),wa=n(" uses the implementation in "),$=l("code"),Ea=n("Message"),ya=n(`, because it wasn\u2019t overwritten.
`),ss=l("code"),_a=n("formalMessage.send()"),ga=n(" would use the implementation in "),as=l("code"),ba=n("FormalMessage"),Ma=n("."),Vs=u(),h=l("p"),Ca=n("But "),es=l("code"),Oa=n("super.getSender()"),Da=n(` uses \u201Cstatic dispatch\u201D instead.
That code is located in class `),ns=l("code"),Sa=n("FormalMessage"),Ta=n(", so "),ts=l("code"),ja=n("super"),xa=n(" refers to class "),os=l("code"),Fa=n("Message"),La=n(" - even if the actual object is of type "),ls=l("code"),Pa=n("FormalIncognitoMessage"),Wa=n(" and that type\u2019s superclass would be "),cs=l("code"),Ia=n("FormalMessage"),Va=n(`.
So the `),ps=l("code"),Aa=n("getSender()"),Ha=n(" implementation of "),is=l("code"),Ja=n("Message"),Ra=n(" is used, even if there is a more specific one as well."),As=u(),J=l("h1"),Ba=n("Method calls on the bytecode level"),Hs=u(),T=l("p"),Na=n("So "),rs=l("code"),Za=n("super"),qa=n(` works differently - that means we should be able to spot the difference in the compiled code, and indeed we can.
Let\u2019s create a more simplified example for looking at this:`),Js=u(),R=l("pre"),Rs=u(),j=l("p"),Ga=n("If we compile this and then look at "),us=l("code"),Ka=n("B"),Ua=n("\u2019s bytecode:"),Bs=u(),B=l("pre"),Ns=u(),N=l("p"),za=n("We get this:"),Zs=u(),Z=l("pre"),qs=u(),x=l("p"),Qa=n("We can roughly read this as (for a more proper understanding, take a look at "),F=l("a"),Xa=n("stack machines"),Ya=n(", of which the JVM is an example):"),Gs=u(),E=l("ul"),b=l("li"),$a=n("Load the "),ds=l("code"),se=n("this"),ae=n(" object ("),hs=l("code"),ee=n("aload_0"),ne=n(")."),te=u(),m=l("li"),oe=n("On that object, do a regular dynamic method call to "),ks=l("code"),le=n("void foo()"),ce=n(`.
The word \u201Cvirtual\u201D here refers to the fact that this is implemented by using a `),L=l("a"),pe=n("virtual function table"),ie=n(` or vtable.
The `),fs=l("code"),re=n("#7"),ue=n(" here is an index at which the method name "),ms=l("code"),de=n("foo"),he=n(" and signature "),vs=l("code"),ke=n("()V"),fe=n(" are stored within the class file."),me=u(),P=l("li"),ve=n("The "),ws=l("code"),we=n("this"),Ee=n(" was \u201Cconsumed\u201D by that call, so load it again for the second call."),ye=u(),_=l("li"),_e=n(`On this object, do a \u201Cspecial\u201D method call to that same method.
Note how the method is specified as `),Es=l("code"),ge=n("A.foo:()V"),be=n(`:
the class to search for `),ys=l("code"),Me=n("foo"),Ce=n(" is compiled into this instruction instead of determined from "),_s=l("code"),Oe=n("this"),De=n(" at runtime."),Se=u(),W=l("li"),Te=n(`Finally, the method returns to the caller, whoever that was.
We don\u2019t write that return in Java (for `),gs=l("code"),je=n("void"),xe=n(" methods), but at the JVM level it\u2019s an important part of what a method does."),Ks=u(),q=l("p"),Fe=n(`There are other kinds of method calls in the JVM.
They are not the topic here, but if you\u2019re interested, try calling static methods and constructors, or this surprisingly intricate piece of code:`),Us=u(),G=l("pre"),zs=u(),K=l("h1"),Le=n("Conclusion"),Qs=u(),k=l("p"),Pe=n("Being able to call "),bs=l("code"),We=n("super.foo()"),Ie=n(" is important, but basically only meant for situations where a class overrides that method "),Ms=l("code"),Ve=n("foo"),Ae=n("; on "),js=l("em"),He=n("inherited"),Je=n(" methods, using "),Cs=l("code"),Re=n("super"),Be=n(` is almost always a mistake.
The difference between `),Os=l("code"),Ne=n("this.foo();"),Ze=n(" and "),Ds=l("code"),qe=n("super.foo();"),Ge=n(" is bigger than it may first seem and may lead to surprising behavior later on - so it\u2019s important to avoid mixing the two up from the start."),this.h()},l(a){D=c(a,"P",{class:!0});var i=p(D);na=t(i,`When creating a subclass, a common situation is to overwrite a method, but using the original class\u2019 logic in doing so.
Let\u2019s say we have a class for sending messages, and we want to make a variant that is written in a more formal style.
In doing so, we want to preserve the \u201Csimple message formatting\u201D logic that the superclass implements.
A simple approach could look like this:`),i.forEach(e),xs=d(a),V=c(a,"PRE",{class:!0});var qn=p(V);qn.forEach(e),Fs=d(a),v=c(a,"P",{class:!0});var M=p(v);ta=t(M,"This might look alright: when overriding "),U=c(M,"CODE",{class:!0});var Ue=p(U);oa=t(Ue,"send"),Ue.forEach(e),la=t(M,", we need to use "),z=c(M,"CODE",{class:!0});var ze=p(z);ca=t(ze,"super.send()"),ze.forEach(e),pa=t(M,` to avoid an accidental recursion.
For consistency, why not also use `),Q=c(M,"CODE",{class:!0});var Qe=p(Q);ia=t(Qe,"super.getReceiver()"),Qe.forEach(e),ra=t(M,`?
Those methods `),Ts=c(M,"EM",{});var Xe=p(Ts);ua=t(Xe,"are"),Xe.forEach(e),da=t(M,` all defined in the superclass, after all.
Well, consider this extension:`),M.forEach(e),Ls=d(a),A=c(a,"PRE",{class:!0});var Gn=p(A);Gn.forEach(e),Ps=d(a),H=c(a,"PRE",{class:!0});var Kn=p(H);Kn.forEach(e),Ws=d(a),S=c(a,"P",{class:!0});var Xs=p(S);ha=t(Xs,"What happened here? Well, that "),X=c(Xs,"CODE",{class:!0});var Ye=p(X);ka=t(Ye,"super"),Ye.forEach(e),fa=t(Xs," is not only special in an overridden method, it generally fixes the implementation of the method to use to that of the superclass."),Xs.forEach(e),Is=d(a),w=c(a,"P",{class:!0});var C=p(w);ma=t(C,`A regular non-static method call in Java uses \u201Cdynamic dispatch\u201D: at runtime, the class of the object the method is called on is used to determine what variant is called.
For example, `),Y=c(C,"CODE",{class:!0});var $e=p(Y);va=t($e,"formalMessage.getSender()"),$e.forEach(e),wa=t(C," uses the implementation in "),$=c(C,"CODE",{class:!0});var sn=p($);Ea=t(sn,"Message"),sn.forEach(e),ya=t(C,`, because it wasn\u2019t overwritten.
`),ss=c(C,"CODE",{class:!0});var an=p(ss);_a=t(an,"formalMessage.send()"),an.forEach(e),ga=t(C," would use the implementation in "),as=c(C,"CODE",{class:!0});var en=p(as);ba=t(en,"FormalMessage"),en.forEach(e),Ma=t(C,"."),C.forEach(e),Vs=d(a),h=c(a,"P",{class:!0});var f=p(h);Ca=t(f,"But "),es=c(f,"CODE",{class:!0});var nn=p(es);Oa=t(nn,"super.getSender()"),nn.forEach(e),Da=t(f,` uses \u201Cstatic dispatch\u201D instead.
That code is located in class `),ns=c(f,"CODE",{class:!0});var tn=p(ns);Sa=t(tn,"FormalMessage"),tn.forEach(e),Ta=t(f,", so "),ts=c(f,"CODE",{class:!0});var on=p(ts);ja=t(on,"super"),on.forEach(e),xa=t(f," refers to class "),os=c(f,"CODE",{class:!0});var ln=p(os);Fa=t(ln,"Message"),ln.forEach(e),La=t(f," - even if the actual object is of type "),ls=c(f,"CODE",{class:!0});var cn=p(ls);Pa=t(cn,"FormalIncognitoMessage"),cn.forEach(e),Wa=t(f," and that type\u2019s superclass would be "),cs=c(f,"CODE",{class:!0});var pn=p(cs);Ia=t(pn,"FormalMessage"),pn.forEach(e),Va=t(f,`.
So the `),ps=c(f,"CODE",{class:!0});var rn=p(ps);Aa=t(rn,"getSender()"),rn.forEach(e),Ha=t(f," implementation of "),is=c(f,"CODE",{class:!0});var un=p(is);Ja=t(un,"Message"),un.forEach(e),Ra=t(f," is used, even if there is a more specific one as well."),f.forEach(e),As=d(a),J=c(a,"H1",{class:!0});var dn=p(J);Ba=t(dn,"Method calls on the bytecode level"),dn.forEach(e),Hs=d(a),T=c(a,"P",{class:!0});var Ys=p(T);Na=t(Ys,"So "),rs=c(Ys,"CODE",{class:!0});var hn=p(rs);Za=t(hn,"super"),hn.forEach(e),qa=t(Ys,` works differently - that means we should be able to spot the difference in the compiled code, and indeed we can.
Let\u2019s create a more simplified example for looking at this:`),Ys.forEach(e),Js=d(a),R=c(a,"PRE",{class:!0});var Un=p(R);Un.forEach(e),Rs=d(a),j=c(a,"P",{class:!0});var $s=p(j);Ga=t($s,"If we compile this and then look at "),us=c($s,"CODE",{class:!0});var kn=p(us);Ka=t(kn,"B"),kn.forEach(e),Ua=t($s,"\u2019s bytecode:"),$s.forEach(e),Bs=d(a),B=c(a,"PRE",{class:!0});var zn=p(B);zn.forEach(e),Ns=d(a),N=c(a,"P",{class:!0});var fn=p(N);za=t(fn,"We get this:"),fn.forEach(e),Zs=d(a),Z=c(a,"PRE",{class:!0});var Qn=p(Z);Qn.forEach(e),qs=d(a),x=c(a,"P",{class:!0});var sa=p(x);Qa=t(sa,"We can roughly read this as (for a more proper understanding, take a look at "),F=c(sa,"A",{href:!0,rel:!0,class:!0});var mn=p(F);Xa=t(mn,"stack machines"),mn.forEach(e),Ya=t(sa,", of which the JVM is an example):"),sa.forEach(e),Gs=d(a),E=c(a,"UL",{class:!0});var O=p(E);b=c(O,"LI",{class:!0});var Ss=p(b);$a=t(Ss,"Load the "),ds=c(Ss,"CODE",{class:!0});var vn=p(ds);se=t(vn,"this"),vn.forEach(e),ae=t(Ss," object ("),hs=c(Ss,"CODE",{class:!0});var wn=p(hs);ee=t(wn,"aload_0"),wn.forEach(e),ne=t(Ss,")."),Ss.forEach(e),te=d(O),m=c(O,"LI",{class:!0});var g=p(m);oe=t(g,"On that object, do a regular dynamic method call to "),ks=c(g,"CODE",{class:!0});var En=p(ks);le=t(En,"void foo()"),En.forEach(e),ce=t(g,`.
The word \u201Cvirtual\u201D here refers to the fact that this is implemented by using a `),L=c(g,"A",{href:!0,rel:!0,class:!0});var yn=p(L);pe=t(yn,"virtual function table"),yn.forEach(e),ie=t(g,` or vtable.
The `),fs=c(g,"CODE",{class:!0});var _n=p(fs);re=t(_n,"#7"),_n.forEach(e),ue=t(g," here is an index at which the method name "),ms=c(g,"CODE",{class:!0});var gn=p(ms);de=t(gn,"foo"),gn.forEach(e),he=t(g," and signature "),vs=c(g,"CODE",{class:!0});var bn=p(vs);ke=t(bn,"()V"),bn.forEach(e),fe=t(g," are stored within the class file."),g.forEach(e),me=d(O),P=c(O,"LI",{class:!0});var aa=p(P);ve=t(aa,"The "),ws=c(aa,"CODE",{class:!0});var Mn=p(ws);we=t(Mn,"this"),Mn.forEach(e),Ee=t(aa," was \u201Cconsumed\u201D by that call, so load it again for the second call."),aa.forEach(e),ye=d(O),_=c(O,"LI",{class:!0});var I=p(_);_e=t(I,`On this object, do a \u201Cspecial\u201D method call to that same method.
Note how the method is specified as `),Es=c(I,"CODE",{class:!0});var Cn=p(Es);ge=t(Cn,"A.foo:()V"),Cn.forEach(e),be=t(I,`:
the class to search for `),ys=c(I,"CODE",{class:!0});var On=p(ys);Me=t(On,"foo"),On.forEach(e),Ce=t(I," is compiled into this instruction instead of determined from "),_s=c(I,"CODE",{class:!0});var Dn=p(_s);Oe=t(Dn,"this"),Dn.forEach(e),De=t(I," at runtime."),I.forEach(e),Se=d(O),W=c(O,"LI",{class:!0});var ea=p(W);Te=t(ea,`Finally, the method returns to the caller, whoever that was.
We don\u2019t write that return in Java (for `),gs=c(ea,"CODE",{class:!0});var Sn=p(gs);je=t(Sn,"void"),Sn.forEach(e),xe=t(ea," methods), but at the JVM level it\u2019s an important part of what a method does."),ea.forEach(e),O.forEach(e),Ks=d(a),q=c(a,"P",{class:!0});var Tn=p(q);Fe=t(Tn,`There are other kinds of method calls in the JVM.
They are not the topic here, but if you\u2019re interested, try calling static methods and constructors, or this surprisingly intricate piece of code:`),Tn.forEach(e),Us=d(a),G=c(a,"PRE",{class:!0});var Xn=p(G);Xn.forEach(e),zs=d(a),K=c(a,"H1",{class:!0});var jn=p(K);Le=t(jn,"Conclusion"),jn.forEach(e),Qs=d(a),k=c(a,"P",{class:!0});var y=p(k);Pe=t(y,"Being able to call "),bs=c(y,"CODE",{class:!0});var xn=p(bs);We=t(xn,"super.foo()"),xn.forEach(e),Ie=t(y," is important, but basically only meant for situations where a class overrides that method "),Ms=c(y,"CODE",{class:!0});var Fn=p(Ms);Ve=t(Fn,"foo"),Fn.forEach(e),Ae=t(y,"; on "),js=c(y,"EM",{});var Ln=p(js);He=t(Ln,"inherited"),Ln.forEach(e),Je=t(y," methods, using "),Cs=c(y,"CODE",{class:!0});var Pn=p(Cs);Re=t(Pn,"super"),Pn.forEach(e),Be=t(y,` is almost always a mistake.
The difference between `),Os=c(y,"CODE",{class:!0});var Wn=p(Os);Ne=t(Wn,"this.foo();"),Wn.forEach(e),Ze=t(y," and "),Ds=c(y,"CODE",{class:!0});var In=p(Ds);qe=t(In,"super.foo();"),In.forEach(e),Ge=t(y," is bigger than it may first seem and may lead to surprising behavior later on - so it\u2019s important to avoid mixing the two up from the start."),y.forEach(e),this.h()},h(){o(D,"class","plain"),o(V,"class","language-java"),o(U,"class","plain"),o(z,"class","plain"),o(Q,"class","plain"),o(v,"class","plain"),o(A,"class","language-java"),o(H,"class","language-java"),o(X,"class","plain"),o(S,"class","plain"),o(Y,"class","plain"),o($,"class","plain"),o(ss,"class","plain"),o(as,"class","plain"),o(w,"class","plain"),o(es,"class","plain"),o(ns,"class","plain"),o(ts,"class","plain"),o(os,"class","plain"),o(ls,"class","plain"),o(cs,"class","plain"),o(ps,"class","plain"),o(is,"class","plain"),o(h,"class","plain"),o(J,"class","plain"),o(rs,"class","plain"),o(T,"class","plain"),o(R,"class","language-java"),o(us,"class","plain"),o(j,"class","plain"),o(B,"class","language-shell"),o(N,"class","plain"),o(Z,"class","language-bytecode"),o(F,"href","https://en.wikipedia.org/wiki/Stack_machine"),o(F,"rel","nofollow"),o(F,"class","plain"),o(x,"class","plain"),o(ds,"class","plain"),o(hs,"class","plain"),o(b,"class","plain"),o(ks,"class","plain"),o(L,"href","https://en.wikipedia.org/wiki/Virtual_method_table"),o(L,"rel","nofollow"),o(L,"class","plain"),o(fs,"class","plain"),o(ms,"class","plain"),o(vs,"class","plain"),o(m,"class","plain"),o(ws,"class","plain"),o(P,"class","plain"),o(Es,"class","plain"),o(ys,"class","plain"),o(_s,"class","plain"),o(_,"class","plain"),o(gs,"class","plain"),o(W,"class","plain"),o(E,"class","plain"),o(q,"class","plain"),o(G,"class","language-java"),o(K,"class","plain"),o(bs,"class","plain"),o(Ms,"class","plain"),o(Cs,"class","plain"),o(Os,"class","plain"),o(Ds,"class","plain"),o(k,"class","plain")},m(a,i){r(a,D,i),s(D,na),r(a,xs,i),r(a,V,i),V.innerHTML=An,r(a,Fs,i),r(a,v,i),s(v,ta),s(v,U),s(U,oa),s(v,la),s(v,z),s(z,ca),s(v,pa),s(v,Q),s(Q,ia),s(v,ra),s(v,Ts),s(Ts,ua),s(v,da),r(a,Ls,i),r(a,A,i),A.innerHTML=Hn,r(a,Ps,i),r(a,H,i),H.innerHTML=Jn,r(a,Ws,i),r(a,S,i),s(S,ha),s(S,X),s(X,ka),s(S,fa),r(a,Is,i),r(a,w,i),s(w,ma),s(w,Y),s(Y,va),s(w,wa),s(w,$),s($,Ea),s(w,ya),s(w,ss),s(ss,_a),s(w,ga),s(w,as),s(as,ba),s(w,Ma),r(a,Vs,i),r(a,h,i),s(h,Ca),s(h,es),s(es,Oa),s(h,Da),s(h,ns),s(ns,Sa),s(h,Ta),s(h,ts),s(ts,ja),s(h,xa),s(h,os),s(os,Fa),s(h,La),s(h,ls),s(ls,Pa),s(h,Wa),s(h,cs),s(cs,Ia),s(h,Va),s(h,ps),s(ps,Aa),s(h,Ha),s(h,is),s(is,Ja),s(h,Ra),r(a,As,i),r(a,J,i),s(J,Ba),r(a,Hs,i),r(a,T,i),s(T,Na),s(T,rs),s(rs,Za),s(T,qa),r(a,Js,i),r(a,R,i),R.innerHTML=Rn,r(a,Rs,i),r(a,j,i),s(j,Ga),s(j,us),s(us,Ka),s(j,Ua),r(a,Bs,i),r(a,B,i),B.innerHTML=Bn,r(a,Ns,i),r(a,N,i),s(N,za),r(a,Zs,i),r(a,Z,i),Z.innerHTML=Nn,r(a,qs,i),r(a,x,i),s(x,Qa),s(x,F),s(F,Xa),s(x,Ya),r(a,Gs,i),r(a,E,i),s(E,b),s(b,$a),s(b,ds),s(ds,se),s(b,ae),s(b,hs),s(hs,ee),s(b,ne),s(E,te),s(E,m),s(m,oe),s(m,ks),s(ks,le),s(m,ce),s(m,L),s(L,pe),s(m,ie),s(m,fs),s(fs,re),s(m,ue),s(m,ms),s(ms,de),s(m,he),s(m,vs),s(vs,ke),s(m,fe),s(E,me),s(E,P),s(P,ve),s(P,ws),s(ws,we),s(P,Ee),s(E,ye),s(E,_),s(_,_e),s(_,Es),s(Es,ge),s(_,be),s(_,ys),s(ys,Me),s(_,Ce),s(_,_s),s(_s,Oe),s(_,De),s(E,Se),s(E,W),s(W,Te),s(W,gs),s(gs,je),s(W,xe),r(a,Ks,i),r(a,q,i),s(q,Fe),r(a,Us,i),r(a,G,i),G.innerHTML=Zn,r(a,zs,i),r(a,K,i),s(K,Le),r(a,Qs,i),r(a,k,i),s(k,Pe),s(k,bs),s(bs,We),s(k,Ie),s(k,Ms),s(Ms,Ve),s(k,Ae),s(k,js),s(js,He),s(k,Je),s(k,Cs),s(Cs,Re),s(k,Be),s(k,Os),s(Os,Ne),s(k,Ze),s(k,Ds),s(Ds,qe),s(k,Ge)},p:Ke,i:Ke,o:Ke,d(a){a&&e(D),a&&e(xs),a&&e(V),a&&e(Fs),a&&e(v),a&&e(Ls),a&&e(A),a&&e(Ps),a&&e(H),a&&e(Ws),a&&e(S),a&&e(Is),a&&e(w),a&&e(Vs),a&&e(h),a&&e(As),a&&e(J),a&&e(Hs),a&&e(T),a&&e(Js),a&&e(R),a&&e(Rs),a&&e(j),a&&e(Bs),a&&e(B),a&&e(Ns),a&&e(N),a&&e(Zs),a&&e(Z),a&&e(qs),a&&e(x),a&&e(Gs),a&&e(E),a&&e(Ks),a&&e(q),a&&e(Us),a&&e(G),a&&e(zs),a&&e(K),a&&e(Qs),a&&e(k)}}}const nt={title:"Calling Superclass Methods",published:"2022-01-21T00:00:00.000Z",edited:"2022-01-22T00:00:00.000Z",categories:["Java"],excerpt:"A common mistake I see Java beginners make is to call methods like `super.foo()` indiscriminate when subclassing is involved. However, there's a subtle difference between that and regular method calls."};class tt extends Yn{constructor(D){super();$n(this,D,null,at,st,{})}}export{tt as default,nt as metadata};
